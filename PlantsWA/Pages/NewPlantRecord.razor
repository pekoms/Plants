@page "/newPlantRecord/{Id}"
@using Plants.Api.Domain.Dtos
@using Plants.WA.Services
@using Plants.WA.Shared
@inject NavigationManager NavigationManager
@inject IJSRuntime jsr

<NavMenu />
<h3>NewPlantDiary</h3>
<form>
    <div class="form-group">
        <label>
            <input type="checkbox" @bind="@IsFertilised" /> Se ha fertilizado
        </label>
    </div>
    <div class="form-group">
        <label>
            <input type="checkbox" @bind="@IsWatered" /> Se ha regado
        </label>
    </div>
    <div class="form-group">
        <label for="inputEmail">Foto:</label>
        <InputFile OnChange="HandleFileChange" />
        @if (Foto != null)
        {
            <h4>Imagen cargada:</h4>
            <img src="@Foto" alt="Imagen cargada" />
        }
    </div>
    <div class="form-group">
        <label for="Observation">Observation:</label>
        <textarea class="form-control" id="Observation" rows="5" @bind="@Observation"></textarea>
    </div>
    <button type="button" class="btn btn-primary" @onclick="@Enviar">Enviar</button>
    @if (spinner == true)
    {
        <button class="btn btn-primary" type="button" disabled>
            <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
            Creando Registro...
        </button>
    }
</form>

@code {
    [Parameter]
    public string Id { get; set; }
    private string? Observation { get; set; }
    public bool IsWatered { get; set; }
    public bool IsFertilised { get; set; }
    private bool spinner = false;
    private string UserId { get; set; }
    public List<PlantRecordDTO> plantsRecord { get; set; } = new List<PlantRecordDTO>();
    public List<PlantDTO> plants { get; set; } = new List<PlantDTO>();

    private string? Foto { get; set; }
    private string token;

    [Inject]
    public IPlantRecordService PlantRecordService { get; set; }
    [Inject]
    public IPlantService PlantService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        token = await jsr.InvokeAsync<string>("localStorage.getItem", "jwtToken");
        plants = await PlantService.GetPlantByPlantId(Id,token);
        UserId = plants.FirstOrDefault().OwnerId;    
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            // Leer el contenido de la imagen
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            // Convertir los datos de la imagen a base64 para mostrarla
            Foto = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
        else
        {
            Foto = null;
        }
    }

    private async void Enviar()
    {
        var createPlantRecord = new PlantRecordDTO
        {
            PlantId=Id,
            Observation=Observation,
            IsWatered=IsWatered,
            IsFertilised = IsFertilised,
            UserId = plants.FirstOrDefault().OwnerId,
            ContentImage=Foto
        };

       await CrearPlantRecord(createPlantRecord,token);

       
        spinner = true;
        await Task.Delay(TimeSpan.FromSeconds(3));
        spinner = false;

        NavigationManager.NavigateTo($"PlantRecord/{Id}");

    }
}
