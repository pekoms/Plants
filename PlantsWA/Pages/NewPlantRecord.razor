@page "/newPlantRecord/{Id}"
@using Plants.Api.Domain.Dtos
@using Plants.WA.Services
@using Plants.WA.Shared
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager NavigationManager
@inject IJSRuntime jsr

<MudText Align="Align.Center" Typo="Typo.h4">Crear Registro Planta</MudText>
<MudItem xs="6" sm="6" md="6" lg="6" xl="6" xxl="6" Class="mx-auto pa-6">
    <MudCard Elevation="3">
<MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFiles" MaximumFileCount="100" >
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context.Id"
                           Class="mx-2 mt-2">
            Only image files
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>
        @if (files != null)
        {
            <MudList>
                @foreach (var file in files)
                {
                    <MudListItem Icon="@Icons.Material.Filled.AttachFile" Class="mx-2">
                        @file.Name <code>@file.Size bytes</code>
                    </MudListItem>
                }
            </MudList>
        }

    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
       
           
                <MudCardContent>
                    <MudCheckBox Label="Fue regada?" @bind-Checked="model.IsWatered" Color="Color.Primary"></MudCheckBox>
                    <MudCheckBox Label="Fue fertilizada?" @bind-Checked="model.IsFertilised" Color="Color.Primary"></MudCheckBox>
                    <MudTextField Variant="Variant.Outlined" Label="Observaciones" HelperText="Observaciones"
                    @bind-Value="model.Observation" For="@(() => model.Observation)" />
                    @*  <MudTextField Label="Password" HelperText="Introduzca su contraseña" Class="mt-3"
                @bind-Value="model.Password" For="@(() => model.Password)" /> *@

                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="@(()=>Crear())" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" Class="mx-2">Crear</MudButton>
                <MudButton OnClick="@(()=>Resetear())" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" Class="mx-2">Reset</MudButton>
                </MudCardActions>
        
    </EditForm>
    </MudCard>
</MudItem>
<MudContainer Class="d-flex justify-end flex-grow-1 gap-4 mt-1">
    <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowBack" Size="Size.Large" OnClick="@(()=>BackToRecord())" />        
    <LoggoutBtn></LoggoutBtn>
</MudContainer>
    @if (success == true)
    {
        <MudAlert Severity="Severity.Success">Se ha autenticado actualizado el registro correctamente</MudAlert>
    }
    @if (error == true)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Ha ocurrido un error inesperado. Intentelo mas tarde</MudAlert>
    }
    @if (loading)
    {
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
    }
    @if (spinner == true)
    {
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />

    }


@code {
    [Parameter]
    public string Id { get; set; }

    public List<PlantRecordDTO> plantsRecord { get; set; } = new List<PlantRecordDTO>();
    public List<PlantDTO> plants { get; set; } = new List<PlantDTO>();
    public PlantRecordCreateForm model { get; set; } = new PlantRecordCreateForm();
    private string? Foto { get; set; }
    private string token;
    private string _ownerId;

    private bool loading = false;
    private bool error = false;
    private bool success = false;
    private bool spinner = false;
    IList<IBrowserFile> files = new List<IBrowserFile>();

    [Inject]
    public IPlantRecordService PlantRecordService { get; set; }
    [Inject]
    public IPlantService PlantService { get; set; }

    public class PlantRecordCreateForm
    {
        [Required]
        public string ContentImage { get; set; }

        [Required]
        public string Observation { get; set; }
        [Required]
        public bool IsWatered { get; set; }

        [Required]
        public bool IsFertilised { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {

        token = await jsr.InvokeAsync<string>("localStorage.getItem", "jwtToken");  
        _ownerId = await jsr.InvokeAsync<string>("localStorage.getItem", "name");

    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            // Leer el contenido de la imagen
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            // Convertir los datos de la imagen a base64 para mostrarla
            Foto = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
        else
        {
            Foto = null;
        }
    }

    private async void Crear()
    {
        try
        {
            var createPlantRecord = new PlantRecordDTO
                {
                    PlantId = Id,
                    Observation = model.Observation,
                    IsWatered = model.IsWatered,
                    IsFertilised = model.IsFertilised,
                    UserId = _ownerId,
                    ContentImage = Foto
                };

            await CrearPlantRecord(createPlantRecord, token);


            spinner = true;
            await Task.Delay(TimeSpan.FromSeconds(3));
            spinner = false;

            NavigationManager.NavigateTo($"PlantRecord/{Id}");
        }catch(Exception ex)
        {

        }
    }
    private async void Resetear()
    {
        model.IsFertilised = false;
        model.IsWatered = false;
        model.Observation = string.Empty;

        files.Clear();

    }
    private async void BackToRecord()
    {
        NavigationManager.NavigateTo($"PlantRecord/{Id}");
    }

    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}
