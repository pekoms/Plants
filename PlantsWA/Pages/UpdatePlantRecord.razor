@page "/updatePlantRecord/{Id}"
@using Plants.Api.Domain.Dtos
@using Plants.WA.Services
@using Plants.WA.Shared
@inject NavigationManager NavigationManager
@inject IJSRuntime jsr

<NavMenu />
<h3>UpdatePlantDiary</h3>
<div class="row">
    

    @if (plant == null )
    {
        <p>Cargando datos...</p>
    }
    else
    {
                 
            <div class="col-sm-4">
                <div class="card">
                    <div class="card-body">
                        <input type="checkbox" checked=@plant.IsFertilised @onchange="e => UpdateCheckboxValue(e, ref IsWatered)" /> Se ha fertilizado
                        <input type="checkbox" checked=@plant.IsWatered @onchange="e => UpdateCheckboxValue(e, ref IsFertilised)" /> Se ha regado
                        <div class="form-group">
                            <label for="inputEmail">Foto:</label>
                            <InputFile OnChange="HandleFileChange" />
                            @if (plant.ContentImage != null)
                            {
                                <h4>Imagen cargada:</h4>
                            <img  src="@plant.ContentImage" alt="Imagen cargada" />
                            }
                        </div>
                        <div class="form-group">
                            <label for="Observation">Observation:</label>
                            <textarea class="form-control" id="Observation" rows="5" @bind="@Observation">@plant.Observation</textarea>
                        </div>
                        
                    </div>
                </div>
            </div>
        
    }


</div>
        <button type="button" class="btn btn-primary" @onclick="@Actualizar">Actualizar</button>
@if (spinner == true)
{
    <button class="btn btn-primary" type="button" disabled>
        <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
        Actualizando Registro...
    </button>
}


@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]

    public PlantRecordDTO plant { get; set; } = new PlantRecordDTO();

    private string? Observation { get; set; }
    private string UserId { get; set; }
    public bool IsWatered;
    public bool IsFertilised;
    private string? Foto { get; set; }

    private bool spinner = false;

    private string token;
    [Inject]
    public IPlantRecordService PlantRecordService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        token = await jsr.InvokeAsync<string>("localStorage.getItem", "jwtToken");
        plant = await PlantRecordService.Get(Id,token);
        if ( plant != null){
            Observation = plant.Observation;
            UserId = plant.UserId;
        }       
    }

    private void UpdateCheckboxValue(ChangeEventArgs e, ref bool checkboxValue)
    {
        checkboxValue = (bool)e.Value;
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            // Leer el contenido de la imagen
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            // Convertir los datos de la imagen a base64 para mostrarla
            Foto = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
        else
        {
            Foto = null;
        }
    }
    private async void Actualizar()
    {
        if (Foto == null) { Foto=plant.ContentImage;};

        var createPlantRecord = new PlantRecordDTO
        {
            Id=plant.Id,            
            PlantId=plant.PlantId,
            UserId = plant.UserId,
            Observation=Observation,
            IsWatered =IsWatered,
            IsFertilised = IsFertilised,
            ContentImage= Foto

        };

       await ActualizaPlantRecord(createPlantRecord,token);

       
        spinner = true;
        await Task.Delay(TimeSpan.FromSeconds(3));
        spinner = false;

        NavigationManager.NavigateTo($"PlantRecord/{plant.PlantId}");

    }
}
