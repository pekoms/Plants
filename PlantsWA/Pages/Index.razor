@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime jsr



@using Plants.Domain.Domain.Dtos;
@using Plants.WA.Services;
@using Plants.WA.Shared;
@using System.ComponentModel.DataAnnotations;


<MudText Align="Align.Center" Typo="Typo.h4">Autenticación</MudText>
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                        <MudItem xs="6" sm="6" md="6" lg="6" xl="6" xxl="6" Class="mx-auto pa-6">
                        <MudCard Elevation="3">
                            <MudCardContent >
                                <MudTextField Label="User Name" HelperText="Introduzca su usuario"
                                @bind-Value="model.Username" For="@(() => model.Username)" />
                                <MudTextField Label="Password" HelperText="Introduzca su contraseña" Class="mt-3"
                                @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />

                            </MudCardContent>
                            <MudCardActions>
                                <MudButton OnClick="@(()=>IniciarSesion())" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Iniciar Sesion</MudButton>
                                <MudButton OnClick="@(()=>Registrarse())" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" Class="mx-2">Registrarse</MudButton>                                
                            </MudCardActions>
                        </MudCard>
                    </MudItem>                
        </EditForm>

        <Captcha  CharNumber="@CaptchaLetters" />
       
        @if (success == true)
        {
            <MudAlert Severity="Severity.Success">Se ha autenticado correctamente</MudAlert>
        }
        @if (error == true)
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Ha ocurrido un error inesperado. Intentelo mas tarde</MudAlert>
        }       
        @if (loading)
        {
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
        }

@code {
    [Inject]
    public IUserService UserService { get; set; }
    [Inject] 
    private IDialogService DialogService { get; set; }
    [Inject]
    SharedStateService SharedState { get; set; }
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    private TokenDTO jwtToken { get; set; }
    bool _drawerOpen = true;
    private bool loading = false;
    private bool error = false;

    private string Captcha = "";
    private int CaptchaLetters = 5;

    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        //[StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; }      

        [Required]
        //[StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }       

    }
    private async void IniciarSesion()
    {
        try
        {
            var loginUser = new UserDTO
                {
                    Name = model.Username,
                    Password = model.Password
                };

            jwtToken = await UserService.Login(loginUser);
            if (!string.IsNullOrEmpty(jwtToken.token))
            {
                // Iniciar sesión exitosamente
                loading = true;
                StateHasChanged();
                await Task.Delay(3000);
                await jsr.InvokeVoidAsync("localStorage.setItem", "jwtToken", jwtToken.token);
                await jsr.InvokeVoidAsync("localStorage.setItem", "name", loginUser.Name);
                SharedState.ActualizarValor(true);
                NavigationManager.NavigateTo("main");
            }
            else
            {
                ShowDialog();
            }
        }
        catch(Exception ex)
        {            
            error = true;
            StateHasChanged();
            await Task.Delay(5000);
            error = false;
            StateHasChanged();
        }                      
    }

    private async void ShowDialog()
    {
        bool? result = await DialogService.ShowMessageBox(
           "Aviso",
           "Usuario o Contraseña incorrecto",
           yesText: "OK");
        
        StateHasChanged();
    }

    private void Registrarse()
    {
        NavigationManager.NavigateTo("registration");
        
    }
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }    
}
