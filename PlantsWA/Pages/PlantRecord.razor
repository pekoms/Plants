@page "/plantRecord/{Id}"
@using Plants.Api.Domain.Dtos
@using Plants.WA.Services
@using Plants.WA.Shared
@inject NavigationManager NavigationManager
@inject IJSRuntime jsr

<MudText Align="Align.Center" Typo="Typo.h4">Paginas de Plantas</MudText>


        @if (plants == null && plants.Any())
        {
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
        }
        else
{
      <MudContainer Class="d-flex justify-start">
        <MudFab OnClick="@(()=>NuevoRegistro())" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large" />
         </MudContainer>
    <MudPaper Class="d-flex align-center flex-grow-1 gap-4" Elevation="3">
            
            @foreach (var data in plants)
            {
             <MudStack Justify="Justify.Center" Row="true">
                  <MudCard Class="mx-auto pa-6">
                    <MudCardMedia Image="@data.ContentImage" Height="300" />
                    <MudCardContent>
                        @* <MudText Typo="Typo.h5"> @IsFertilisedTxt</MudText> *@
                        <MudText Typo="Typo.body2">@data.Finsert</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                        <MudButton OnClick="@(()=>Modificar(data.Id))" Variant="Variant.Text" Color="Color.Surface">Observar</MudButton>
                        <MudIconButton Icon="@Icons.Material.Outlined.Remove" Color="Color.Inherit" />
                        <MudButton OnClick="@(()=>Eliminar(data.Id,data.PlantId))" Variant="Variant.Text" Color="Color.Warning">Observar</MudButton>
                    </MudCardActions>
                    </MudCard>
                </MudStack>                                                  
            }    
        @if (spinner == true)
        {
            <MudAlert Severity="Severity.Success">Borrando Registro...</MudAlert>
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
        }
       
        </MudPaper>
        }

      
        


@code {
    private bool spinner = false;
    public List<PlantRecordDTO> plants { get; set; } = new List<PlantRecordDTO>();
    [Parameter]
    public string? Id { get; set; }

    [Inject]
    public IPlantRecordService PlantRecordService { get; set; }    
    private string token;


    protected override async Task OnInitializedAsync()
    {
        token = await jsr.InvokeAsync<string>("localStorage.getItem", "jwtToken");
        plants = await PlantRecordService.GetAllPlantsByPlantId(Id,token);
    }

    private void NuevoRegistro()
    {           
        NavigationManager.NavigateTo($"newPlantRecord/{Id}");
    }

    private void Modificar(string recordId)
    {
        NavigationManager.NavigateTo($"updatePlantRecord/{recordId}");
    }
    private async void Eliminar(string recordId,string plantId)
    {
        spinner = true;
        await PlantRecordService.Delete(recordId,token);       
        await Task.Delay(TimeSpan.FromSeconds(5));
        spinner = false;
        NavigationManager.NavigateTo($"PlantRecord/{plantId}"
        );
    }
}
