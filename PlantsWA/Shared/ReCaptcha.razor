@using Plants.WA.Services;
@inject IJSRuntime jsr


@code {
    private static ReCaptcha _instancia;

  // Constructor privado para evitar instanciación externa

    public static ReCaptcha Instancia
    {
        get
        {
            if (_instancia == null)
            {
                _instancia = new ReCaptcha();
            }
            return _instancia;
        }
    }
    [Parameter]
    public string newToken { get; set; }
    [Parameter]
    public EventCallback<string> onTokenChange { get; set; }

    private static string _token { get; set; } = "";

    private string dataKey = "6LfiXicpAAAAAAbAXl8KOHSCs_ZhA9ldpHyi6bQ_";

    protected override async Task OnInitializedAsync()
    {
        await jsr.InvokeVoidAsync("recaptchaReady");
    } 

    // [JSInvokable]
    // public async static void RecaptchaCallback(string token)
    // {
    //     // Lógica para manejar el token de reCAPTCHA en el lado de Blazor

    //     _token = token;
    //     if (!string.IsNullOrEmpty(_token))
    //     {
    //         Instancia.CambiarMensaje();
    //         Console.WriteLine($"Token de reCAPTCHA: {token}");
           
    //     }
    // }

    public async void CambiarMensaje()
    {       
            await onTokenChange.InvokeAsync(_token);        
    }

}
